// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/dao/model"
)

func newRoom(db *gorm.DB, opts ...gen.DOOption) room {
	_room := room{}

	_room.roomDo.UseDB(db, opts...)
	_room.roomDo.UseModel(&model.Room{})

	tableName := _room.roomDo.TableName()
	_room.ALL = field.NewAsterisk(tableName)
	_room.RoomID = field.NewInt32(tableName, "room_id")
	_room.RoomName = field.NewString(tableName, "room_name")

	_room.fillFieldMap()

	return _room
}

type room struct {
	roomDo roomDo

	ALL      field.Asterisk
	RoomID   field.Int32
	RoomName field.String

	fieldMap map[string]field.Expr
}

func (r room) Table(newTableName string) *room {
	r.roomDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r room) As(alias string) *room {
	r.roomDo.DO = *(r.roomDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *room) updateTableName(table string) *room {
	r.ALL = field.NewAsterisk(table)
	r.RoomID = field.NewInt32(table, "room_id")
	r.RoomName = field.NewString(table, "room_name")

	r.fillFieldMap()

	return r
}

func (r *room) WithContext(ctx context.Context) *roomDo { return r.roomDo.WithContext(ctx) }

func (r room) TableName() string { return r.roomDo.TableName() }

func (r room) Alias() string { return r.roomDo.Alias() }

func (r room) Columns(cols ...field.Expr) gen.Columns { return r.roomDo.Columns(cols...) }

func (r *room) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *room) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 2)
	r.fieldMap["room_id"] = r.RoomID
	r.fieldMap["room_name"] = r.RoomName
}

func (r room) clone(db *gorm.DB) room {
	r.roomDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r room) replaceDB(db *gorm.DB) room {
	r.roomDo.ReplaceDB(db)
	return r
}

type roomDo struct{ gen.DO }

func (r roomDo) Debug() *roomDo {
	return r.withDO(r.DO.Debug())
}

func (r roomDo) WithContext(ctx context.Context) *roomDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roomDo) ReadDB() *roomDo {
	return r.Clauses(dbresolver.Read)
}

func (r roomDo) WriteDB() *roomDo {
	return r.Clauses(dbresolver.Write)
}

func (r roomDo) Session(config *gorm.Session) *roomDo {
	return r.withDO(r.DO.Session(config))
}

func (r roomDo) Clauses(conds ...clause.Expression) *roomDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roomDo) Returning(value interface{}, columns ...string) *roomDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roomDo) Not(conds ...gen.Condition) *roomDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roomDo) Or(conds ...gen.Condition) *roomDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roomDo) Select(conds ...field.Expr) *roomDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roomDo) Where(conds ...gen.Condition) *roomDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roomDo) Order(conds ...field.Expr) *roomDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roomDo) Distinct(cols ...field.Expr) *roomDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roomDo) Omit(cols ...field.Expr) *roomDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roomDo) Join(table schema.Tabler, on ...field.Expr) *roomDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roomDo) LeftJoin(table schema.Tabler, on ...field.Expr) *roomDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roomDo) RightJoin(table schema.Tabler, on ...field.Expr) *roomDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roomDo) Group(cols ...field.Expr) *roomDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roomDo) Having(conds ...gen.Condition) *roomDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roomDo) Limit(limit int) *roomDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roomDo) Offset(offset int) *roomDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roomDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *roomDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roomDo) Unscoped() *roomDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roomDo) Create(values ...*model.Room) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roomDo) CreateInBatches(values []*model.Room, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roomDo) Save(values ...*model.Room) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roomDo) First() (*model.Room, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Room), nil
	}
}

func (r roomDo) Take() (*model.Room, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Room), nil
	}
}

func (r roomDo) Last() (*model.Room, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Room), nil
	}
}

func (r roomDo) Find() ([]*model.Room, error) {
	result, err := r.DO.Find()
	return result.([]*model.Room), err
}

func (r roomDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Room, err error) {
	buf := make([]*model.Room, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roomDo) FindInBatches(result *[]*model.Room, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roomDo) Attrs(attrs ...field.AssignExpr) *roomDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roomDo) Assign(attrs ...field.AssignExpr) *roomDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roomDo) Joins(fields ...field.RelationField) *roomDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roomDo) Preload(fields ...field.RelationField) *roomDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roomDo) FirstOrInit() (*model.Room, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Room), nil
	}
}

func (r roomDo) FirstOrCreate() (*model.Room, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Room), nil
	}
}

func (r roomDo) FindByPage(offset int, limit int) (result []*model.Room, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roomDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roomDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roomDo) Delete(models ...*model.Room) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roomDo) withDO(do gen.Dao) *roomDo {
	r.DO = *do.(*gen.DO)
	return r
}
